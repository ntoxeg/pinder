Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from pinder.core.loader.dataset import collate_batch, get_torch_loader
from torch.utils.data import DataLoader

batch_size = 2
train_dataloader = get_torch_loader(
    train_dataset, 
    batch_size=batch_size,
    shuffle=True,
    collate_fn=collate_batch,
    num_workers=0, 
)
assert isinstance(train_dataloader, DataLoader)
assert hasattr(train_dataloader, "dataset")

# Get a batch from the dataloader
batch = next(iter(train_dataloader))

# expected batch dict keys
assert set(batch.keys()) == {
    "target_complex",
    "feature_complex",
    "id",
    "sample_id",
    "target_id",
}
assert isinstance(batch["target_complex"], dict)
assert isinstance(batch["target_complex"]["atom_coordinates"], torch.Tensor)
feature_coords = batch["feature_complex"]["atom_coordinates"]
# Ensure batch size propagates to tensor dims
assert feature_coords.shape[0] == batch_size
# Ensure coordinates have dim 3
assert feature_coords.shape[2] == 3

------------------

----- stderr -----
2024-09-05 22:47:18,586 | pinder.core.utils.cloud:375 | INFO : Gsutil process_many=download_to_filename, threads=4, items=5
----- stderr -----
2024-09-05 22:47:18,788 | pinder.core.utils.cloud.process_many:23 | INFO : runtime succeeded:      0.20s
----- stderr -----
2024-09-05 22:47:19,043 | pinder.core.utils.cloud:375 | INFO : Gsutil process_many=download_to_filename, threads=4, items=9
----- stderr -----
2024-09-05 22:47:19,301 | pinder.core.utils.cloud.process_many:23 | INFO : runtime succeeded:      0.26s
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
Cell [0;32mIn[17], line 16[0m
[1;32m     13[0m [38;5;28;01massert[39;00m [38;5;28mhasattr[39m(train_dataloader, [38;5;124m"[39m[38;5;124mdataset[39m[38;5;124m"[39m)
[1;32m     15[0m [38;5;66;03m# Get a batch from the dataloader[39;00m
[0;32m---> 16[0m batch [38;5;241m=[39m [38;5;28;43mnext[39;49m[43m([49m[38;5;28;43miter[39;49m[43m([49m[43mtrain_dataloader[49m[43m)[49m[43m)[49m
[1;32m     18[0m [38;5;66;03m# expected batch dict keys[39;00m
[1;32m     19[0m [38;5;28;01massert[39;00m [38;5;28mset[39m(batch[38;5;241m.[39mkeys()) [38;5;241m==[39m {
[1;32m     20[0m     [38;5;124m"[39m[38;5;124mtarget_complex[39m[38;5;124m"[39m,
[1;32m     21[0m     [38;5;124m"[39m[38;5;124mfeature_complex[39m[38;5;124m"[39m,
[0;32m   (...)[0m
[1;32m     24[0m     [38;5;124m"[39m[38;5;124mtarget_id[39m[38;5;124m"[39m,
[1;32m     25[0m }

File [0;32m/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/torch/utils/data/dataloader.py:630[0m, in [0;36m_BaseDataLoaderIter.__next__[0;34m(self)[0m
[1;32m    627[0m [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39m_sampler_iter [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[1;32m    628[0m     [38;5;66;03m# TODO(https://github.com/pytorch/pytorch/issues/76750)[39;00m
[1;32m    629[0m     [38;5;28mself[39m[38;5;241m.[39m_reset()  [38;5;66;03m# type: ignore[call-arg][39;00m
[0;32m--> 630[0m data [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_next_data[49m[43m([49m[43m)[49m
[1;32m    631[0m [38;5;28mself[39m[38;5;241m.[39m_num_yielded [38;5;241m+[39m[38;5;241m=[39m [38;5;241m1[39m
[1;32m    632[0m [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39m_dataset_kind [38;5;241m==[39m _DatasetKind[38;5;241m.[39mIterable [38;5;129;01mand[39;00m \
[1;32m    633[0m         [38;5;28mself[39m[38;5;241m.[39m_IterableDataset_len_called [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m [38;5;129;01mand[39;00m \
[1;32m    634[0m         [38;5;28mself[39m[38;5;241m.[39m_num_yielded [38;5;241m>[39m [38;5;28mself[39m[38;5;241m.[39m_IterableDataset_len_called:

File [0;32m/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/torch/utils/data/dataloader.py:674[0m, in [0;36m_SingleProcessDataLoaderIter._next_data[0;34m(self)[0m
[1;32m    672[0m [38;5;28;01mdef[39;00m [38;5;21m_next_data[39m([38;5;28mself[39m):
[1;32m    673[0m     index [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_next_index()  [38;5;66;03m# may raise StopIteration[39;00m
[0;32m--> 674[0m     data [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_dataset_fetcher[49m[38;5;241;43m.[39;49m[43mfetch[49m[43m([49m[43mindex[49m[43m)[49m  [38;5;66;03m# may raise StopIteration[39;00m
[1;32m    675[0m     [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39m_pin_memory:
[1;32m    676[0m         data [38;5;241m=[39m _utils[38;5;241m.[39mpin_memory[38;5;241m.[39mpin_memory(data, [38;5;28mself[39m[38;5;241m.[39m_pin_memory_device)

File [0;32m/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/torch/utils/data/_utils/fetch.py:51[0m, in [0;36m_MapDatasetFetcher.fetch[0;34m(self, possibly_batched_index)[0m
[1;32m     49[0m         data [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mdataset[38;5;241m.[39m__getitems__(possibly_batched_index)
[1;32m     50[0m     [38;5;28;01melse[39;00m:
[0;32m---> 51[0m         data [38;5;241m=[39m [[38;5;28mself[39m[38;5;241m.[39mdataset[idx] [38;5;28;01mfor[39;00m idx [38;5;129;01min[39;00m possibly_batched_index]
[1;32m     52[0m [38;5;28;01melse[39;00m:
[1;32m     53[0m     data [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mdataset[possibly_batched_index]

File [0;32m/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/torch/utils/data/_utils/fetch.py:51[0m, in [0;36m<listcomp>[0;34m(.0)[0m
[1;32m     49[0m         data [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mdataset[38;5;241m.[39m__getitems__(possibly_batched_index)
[1;32m     50[0m     [38;5;28;01melse[39;00m:
[0;32m---> 51[0m         data [38;5;241m=[39m [[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mdataset[49m[43m[[49m[43midx[49m[43m][49m [38;5;28;01mfor[39;00m idx [38;5;129;01min[39;00m possibly_batched_index]
[1;32m     52[0m [38;5;28;01melse[39;00m:
[1;32m     53[0m     data [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mdataset[possibly_batched_index]

File [0;32m/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/pinder/core/loader/dataset.py:285[0m, in [0;36mPinderDataset.__getitem__[0;34m(self, idx)[0m
[1;32m    282[0m [38;5;28;01mdef[39;00m [38;5;21m__getitem__[39m(
[1;32m    283[0m     [38;5;28mself[39m, idx: [38;5;28mint[39m
[1;32m    284[0m ) [38;5;241m-[39m[38;5;241m>[39m [38;5;28mdict[39m[[38;5;28mstr[39m, [38;5;28mdict[39m[[38;5;28mstr[39m, torch[38;5;241m.[39mTensor] [38;5;241m|[39m torch[38;5;241m.[39mTensor]:
[0;32m--> 285[0m     system, feature_complex, target_complex [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mloader[49m[43m[[49m[43midx[49m[43m][49m
[1;32m    286[0m     sample_id [38;5;241m=[39m feature_complex[38;5;241m.[39mpinder_id
[1;32m    287[0m     target_id [38;5;241m=[39m target_complex[38;5;241m.[39mpinder_id

File [0;32m/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/pinder/core/loader/loader.py:380[0m, in [0;36mPinderLoader.__getitem__[0;34m(self, idx)[0m
[1;32m    373[0m [38;5;28;01melse[39;00m:
[1;32m    374[0m     selected_monomers [38;5;241m=[39m select_monomer(
[1;32m    375[0m         row,
[1;32m    376[0m         [38;5;28mself[39m[38;5;241m.[39mmonomer_priority,
[1;32m    377[0m         [38;5;28mself[39m[38;5;241m.[39mfallback_to_holo,
[1;32m    378[0m         [38;5;28mself[39m[38;5;241m.[39muse_canonical_apo,
[1;32m    379[0m     )
[0;32m--> 380[0m target_complex, feature_complex [38;5;241m=[39m [43m_create_target_feature_complex[49m[43m([49m
[1;32m    381[0m [43m    [49m[43msystem[49m[43m,[49m
[1;32m    382[0m [43m    [49m[43mselected_monomers[49m[43m,[49m
[1;32m    383[0m [43m    [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mcrop_equal_monomer_shapes[49m[43m,[49m
[1;32m    384[0m [43m    [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mfallback_to_holo[49m[43m,[49m
[1;32m    385[0m [43m[49m[43m)[49m
[1;32m    386[0m valid_idx [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mapply_structure_filters(target_complex)
[1;32m    387[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m valid_idx:

File [0;32m/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/pinder/core/loader/loader.py:178[0m, in [0;36m_create_target_feature_complex[0;34m(system, selected_monomers, crop_equal_monomer_shapes, fallback_to_holo)[0m
[1;32m    176[0m     decoy_L [38;5;241m=[39m [38;5;28mgetattr[39m(system, selected_monomers[[38;5;124m"[39m[38;5;124mL[39m[38;5;124m"[39m] [38;5;241m+[39m [38;5;124m"[39m[38;5;124m_ligand[39m[38;5;124m"[39m)
[1;32m    177[0m [38;5;28;01mif[39;00m decoy_R [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m [38;5;129;01mor[39;00m decoy_L [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[0;32m--> 178[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
[1;32m    179[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;124mNo valid monomers found for [39m[38;5;132;01m{[39;00msystem[38;5;241m.[39mentry[38;5;241m.[39mid[38;5;132;01m}[39;00m[38;5;124m with selected_monomers=[39m[38;5;132;01m{[39;00mselected_monomers[38;5;132;01m}[39;00m[38;5;124m"[39m
[1;32m    180[0m     )
[1;32m    181[0m both_holo [38;5;241m=[39m [38;5;28mall[39m([selection [38;5;241m==[39m [38;5;124m"[39m[38;5;124mholo[39m[38;5;124m"[39m [38;5;28;01mfor[39;00m selection [38;5;129;01min[39;00m selected_monomers[38;5;241m.[39mvalues()])
[1;32m    182[0m [38;5;66;03m# No need to crop since our target and feature complex is identical[39;00m

[0;31mValueError[0m: No valid monomers found for 7xo5__A1_P0DTC2--7xo5__B1_P0DTC2 with selected_monomers={'R': 'holo', 'L': 'holo'}

